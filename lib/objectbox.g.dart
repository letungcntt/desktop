// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'media_conversation/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6861805016079206464),
      name: 'Media',
      lastPropertyId: const IdUid(10, 3413264603912303315),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2702756830654910334),
            name: 'localId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4597110856942034595),
            name: 'pathInDevice',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 898083122814801858),
            name: 'remoteUrl',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 7389310413820421371)),
        ModelProperty(
            id: const IdUid(4, 2828290150242274044),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const IdUid(2, 3424186378862200661)),
        ModelProperty(
            id: const IdUid(5, 4983435052483734883),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 765413271514850662),
            name: 'metaData',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 982657495441939166),
            name: 'size',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7410428979993984634),
            name: 'keyEncrypt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2329653410046300580),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3413264603912303315),
            name: 'version',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 275369382404678635),
      name: 'MediaConversation',
      lastPropertyId: const IdUid(8, 651792314313018640),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 29796006850205116),
            name: 'localId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1442713841608998011),
            name: 'messageId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8586811796737179898),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7520300815573811179),
            name: 'conversationId',
            type: 9,
            flags: 2048,
            indexId: const IdUid(3, 7868740462426779017)),
        ModelProperty(
            id: const IdUid(5, 4889705799191854830),
            name: 'insertedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4752600099882084273),
            name: 'keyDecrypt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 58376986096370357),
            name: 'currentTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 651792314313018640),
            name: 'mediaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 4335266089894186280),
            relationTarget: 'Media')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 275369382404678635),
      lastIndexId: const IdUid(4, 4335266089894186280),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Media: EntityDefinition<Media>(
        model: _entities[0],
        toOneRelations: (Media object) => [],
        toManyRelations: (Media object) => {},
        getId: (Media object) => object.localId,
        setId: (Media object, int id) {
          object.localId = id;
        },
        objectToFB: (Media object, fb.Builder fbb) {
          final pathInDeviceOffset = object.pathInDevice == null
              ? null
              : fbb.writeString(object.pathInDevice!);
          final remoteUrlOffset = fbb.writeString(object.remoteUrl);
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final metaDataOffset = fbb.writeString(object.metaData);
          final keyEncryptOffset = fbb.writeString(object.keyEncrypt);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(11);
          fbb.addInt64(0, object.localId);
          fbb.addOffset(1, pathInDeviceOffset);
          fbb.addOffset(2, remoteUrlOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, typeOffset);
          fbb.addOffset(5, metaDataOffset);
          fbb.addInt64(6, object.size);
          fbb.addOffset(7, keyEncryptOffset);
          fbb.addOffset(8, statusOffset);
          fbb.addInt64(9, object.version);
          fbb.finish(fbb.endTable());
          return object.localId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Media(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22));

          return object;
        }),
    MediaConversation: EntityDefinition<MediaConversation>(
        model: _entities[1],
        toOneRelations: (MediaConversation object) => [object.media],
        toManyRelations: (MediaConversation object) => {},
        getId: (MediaConversation object) => object.localId,
        setId: (MediaConversation object, int id) {
          object.localId = id;
        },
        objectToFB: (MediaConversation object, fb.Builder fbb) {
          final messageIdOffset = fbb.writeString(object.messageId);
          final userIdOffset = fbb.writeString(object.userId);
          final conversationIdOffset = fbb.writeString(object.conversationId);
          final insertedAtOffset = fbb.writeString(object.insertedAt);
          final keyDecryptOffset = fbb.writeString(object.keyDecrypt);
          fbb.startTable(9);
          fbb.addInt64(0, object.localId);
          fbb.addOffset(1, messageIdOffset);
          fbb.addOffset(2, userIdOffset);
          fbb.addOffset(3, conversationIdOffset);
          fbb.addOffset(4, insertedAtOffset);
          fbb.addOffset(5, keyDecryptOffset);
          fbb.addInt64(6, object.currentTime);
          fbb.addInt64(7, object.media.targetId);
          fbb.finish(fbb.endTable());
          return object.localId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MediaConversation(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));
          object.media.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.media.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Media] entity fields to define ObjectBox queries.
class Media_ {
  /// see [Media.localId]
  static final localId =
      QueryIntegerProperty<Media>(_entities[0].properties[0]);

  /// see [Media.pathInDevice]
  static final pathInDevice =
      QueryStringProperty<Media>(_entities[0].properties[1]);

  /// see [Media.remoteUrl]
  static final remoteUrl =
      QueryStringProperty<Media>(_entities[0].properties[2]);

  /// see [Media.name]
  static final name = QueryStringProperty<Media>(_entities[0].properties[3]);

  /// see [Media.type]
  static final type = QueryStringProperty<Media>(_entities[0].properties[4]);

  /// see [Media.metaData]
  static final metaData =
      QueryStringProperty<Media>(_entities[0].properties[5]);

  /// see [Media.size]
  static final size = QueryIntegerProperty<Media>(_entities[0].properties[6]);

  /// see [Media.keyEncrypt]
  static final keyEncrypt =
      QueryStringProperty<Media>(_entities[0].properties[7]);

  /// see [Media.status]
  static final status = QueryStringProperty<Media>(_entities[0].properties[8]);

  /// see [Media.version]
  static final version =
      QueryIntegerProperty<Media>(_entities[0].properties[9]);
}

/// [MediaConversation] entity fields to define ObjectBox queries.
class MediaConversation_ {
  /// see [MediaConversation.localId]
  static final localId =
      QueryIntegerProperty<MediaConversation>(_entities[1].properties[0]);

  /// see [MediaConversation.messageId]
  static final messageId =
      QueryStringProperty<MediaConversation>(_entities[1].properties[1]);

  /// see [MediaConversation.userId]
  static final userId =
      QueryStringProperty<MediaConversation>(_entities[1].properties[2]);

  /// see [MediaConversation.conversationId]
  static final conversationId =
      QueryStringProperty<MediaConversation>(_entities[1].properties[3]);

  /// see [MediaConversation.insertedAt]
  static final insertedAt =
      QueryStringProperty<MediaConversation>(_entities[1].properties[4]);

  /// see [MediaConversation.keyDecrypt]
  static final keyDecrypt =
      QueryStringProperty<MediaConversation>(_entities[1].properties[5]);

  /// see [MediaConversation.currentTime]
  static final currentTime =
      QueryIntegerProperty<MediaConversation>(_entities[1].properties[6]);

  /// see [MediaConversation.media]
  static final media =
      QueryRelationToOne<MediaConversation, Media>(_entities[1].properties[7]);
}
